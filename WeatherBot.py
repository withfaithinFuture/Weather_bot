import requests
import telebot
from telebot import types
from datetime import datetime
import os



class WeatherBot:

    # –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ headers
    URL_kr = 'https://yandex.ru/pogoda/?lat=55.8310051&lon=37.33039856'
    URL_msc = 'https://yandex.ru/pogoda/?via=hl'
    # headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'}
    headers = {
        'User-Agent': 'YOUR HEADERS'}

    # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π API –±–æ—Ç–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞, –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–≥–æ–¥—É
    def __init__(self, api_key):
        self.api_key = api_key
        self.bot = telebot.TeleBot(api_key)
        self.init_commands()

    # –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É "—Å—Ç–∞—Ä—Ç". –°–æ–∑–¥–∞–µ—Ç 2 –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, —á–µ–≥–æ —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã
    def init_commands(self):
        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button_kr = types.KeyboardButton('–ü–æ–≥–æ–¥–∞ –≤ –ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫–µ')
            button_msc = types.KeyboardButton('–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ')
            keyboard.add(button_kr, button_msc)

            self.bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëãüèª\n\n–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç <b>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥</b> –Ω–∞ <u>30 –¥–Ω–µ–π</u>: –∫–æ–≥–¥–∞ –≤–∞–º –ø–æ–Ω—Ä–∞–≤—è—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –µ–≥–æ —É—Å–ª—É–≥–∏ <u>–≤—Å–µ–≥–æ</u> –∑–∞ 100 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü :)\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø–ª–∞—Ç—ã –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∫–æ–º—É-—Ç–æ\n\n–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?', reply_markup=keyboard, parse_mode='html')

        # –ú–µ—Ç–æ–¥, –ø–µ—Ä–µ–¥–∞—é—â–∏–π –¥–∞–Ω–Ω—ã–µ –ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫–∞
        @self.bot.message_handler(func=lambda message: message.text == '–ü–æ–≥–æ–¥–∞ –≤ –ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫–µ')
        def handle_weather_kr(message):
            self.handle_weather(message, city="–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫–µ")

        # –ú–µ—Ç–æ–¥, –ø–µ—Ä–µ–¥–∞—é—â–∏–π –¥–∞–Ω–Ω—ã–µ –ú–æ—Å–∫–≤—ã
        @self.bot.message_handler(func=lambda message: message.text == '–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ')
        def handle_weather_moscow(message):
            self.handle_weather(message, city="–ú–æ—Å–∫–≤–µ")

    conditions_dict = {
        'clear': '–Ø—Å–Ω–æ ‚òÄÔ∏è',
        'partly-cloudy': '–ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ üå§',
        'cloudy': '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ ‚õÖÔ∏è',
        'overcast': '–ü–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è',
        'light-rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß',
        'rain': '–î–æ–∂–¥—å üåß',
        'heavy-rain': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåß',
        'showers': '–õ–∏–≤–µ–Ω—å üåß',
        'wet-snow': '–î–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º üåß üå®',
        'light-snow': '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ üå®',
        'snow': '–°–Ω–µ–≥ üå®',
        'snow-showers': '–°–Ω–µ–≥–æ–ø–∞–¥ üå®',
        'hail': '–ì—Ä–∞–¥ üåß üßä',
        'thunderstorm': '–ì—Ä–æ–∑–∞ üå©',
        'thunderstorm-with-rain': '–î–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π ‚õà',
        'thunderstorm-with-hail': '–ì—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º üå© üßä'
    }

    months = {
        '01': "–Ø–Ω–≤–∞—Ä—è",
        '02': "–§–µ–≤—Ä–∞–ª—è",
        '03': "–ú–∞—Ä—Ç–∞",
        '04': "–ê–ø—Ä–µ–ª—è",
        '05': "–ú–∞—è",
        '06': "–ò—é–Ω—è",
        '07': "–ò—é–ª—è",
        '08': "–ê–≤–≥—É—Å—Ç–∞",
        '09': "–°–µ–Ω—Ç—è–±—Ä—è",
        '10': "–û–∫—Ç—è–±—Ä—è",
        '11': "–ù–æ—è–±—Ä—è",
        '12': "–î–µ–∫–∞–±—Ä—è"
    }

    def get_hourly_forecast(self, data):
        forecast_today = data['forecasts'][0]['hours']
        hourly_forecast = []

        for hour_data in forecast_today:
            if len(hour_data['hour']) == 1:

                translated_condition = self.conditions_dict.get(hour_data['condition'])

                hourly_forecast.append({f"0{hour_data['hour']}:00": f"{hour_data['temp']}¬∞\n{translated_condition}\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ - {hour_data['prec_prob']}%\nüí¶ - {hour_data['humidity']}%"})

            elif len(hour_data['hour']) == 2:

                translated_condition = self.conditions_dict.get(hour_data['condition'])

                hourly_forecast.append({f"{hour_data['hour']}:00": f"{hour_data['temp']}¬∞\n{translated_condition}\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤ - {hour_data['prec_prob']}%\nüí¶ - {hour_data['humidity']}%"})

        hourly_forecast_str = '\n'.join([f"{hour}:\n{data}\n" for hour_data in hourly_forecast for hour, data in hour_data.items()])

        return hourly_forecast_str

    def get_week_forecast(self, data):
        forecast_7days = {
            f'{data["forecasts"][0]["date"]}': f'{data["forecasts"][0]["parts"]["day"]["temp_max"]}¬∞\n{self.conditions_dict.get(data["forecasts"][0]["parts"]["day"]["condition"])}',

            f'{data["forecasts"][1]["date"]}': f'{data["forecasts"][1]["parts"]["day"]["temp_max"]}¬∞\n{self.conditions_dict.get(data["forecasts"][1]["parts"]["day"]["condition"])}',

            f'{data["forecasts"][2]["date"]}': f'{data["forecasts"][2]["parts"]["day"]["temp_max"]}¬∞\n{self.conditions_dict.get(data["forecasts"][2]["parts"]["day"]["condition"])}',

            f'{data["forecasts"][3]["date"]}': f'{data["forecasts"][3]["parts"]["day"]["temp_max"]}¬∞\n{self.conditions_dict.get(data["forecasts"][3]["parts"]["day"]["condition"])}',

            f'{data["forecasts"][4]["date"]}': f'{data["forecasts"][4]["parts"]["day"]["temp_max"]}¬∞\n{self.conditions_dict.get(data["forecasts"][4]["parts"]["day"]["condition"])}',

            f'{data["forecasts"][5]["date"]}': f'{data["forecasts"][5]["parts"]["day"]["temp_max"]}¬∞\n{self.conditions_dict.get(data["forecasts"][5]["parts"]["day"]["condition"])}',

            f'{data["forecasts"][6]["date"]}': f'{data["forecasts"][6]["parts"]["day"]["temp_max"]}¬∞\n{self.conditions_dict.get(data["forecasts"][0]["parts"]["day"]["condition"])}'

        }

        formatted_forecast_data = {}
        for date, temp in forecast_7days.items():
            date_str = date.split('-')
            month = self.months.get(date_str[1])
            day = date_str[-1]
            formatted_data = day + ' ' + month
            formatted_forecast_data[formatted_data] = temp

        week_forecast_str = '\n'.join([f"{day[:-1]}—è: {data}\n" for day, data in formatted_forecast_data.items()])

        return week_forecast_str

    def get_weather_kr(self):
        url = 'https://api.weather.yandex.ru/v2/forecast?lat=55.8310051&lon=37.33039856&hours=true&extra=false'
        Api = "YOUR API"
        headers_API = {'X-Yandex-API-Key': f'{Api}'}
        params = {'lang': "ru_RU"}
        response = requests.get(url, headers=headers_API, params=params)
        data = response.json()
        kr_week_forecast = self.get_week_forecast(data)
        kr_hourly_forecast = self.get_hourly_forecast(data)
        return kr_hourly_forecast, kr_week_forecast

    def get_weather_msc(self):
        url = 'https://api.weather.yandex.ru/v2/forecast?lat=55.75554452682161&lon=37.61990478791612&hours=true&extra=false'
        Api = "YOUR API"
        headers_API = {'X-Yandex-API-Key': f'{Api}'}
        params = {'lang': "ru_RU"}
        response = requests.get(url, headers=headers_API, params=params)
        data = response.json()
        msc_week_forecast = self.get_week_forecast(data)
        msc_hourly_forecast = self.get_hourly_forecast(data)
        return msc_hourly_forecast, msc_week_forecast

    # –í—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    def handle_weather(self, message, city):
        if city == '–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫–µ':
            forecast_today, forecast_7days = self.get_weather_kr()

        elif city == '–ú–æ—Å–∫–≤–µ':
            forecast_today, forecast_7days = self.get_weather_msc()

        response = f"<b><u>–ü–æ–≥–æ–¥–∞ –≤ {city} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</u></b>\n\n{forecast_today}\n\n<b><u>–ü–æ–≥–æ–¥–∞ –≤ {city} –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π:</u></b>\n\n{forecast_7days}"
        self.bot.send_message(message.chat.id, response, parse_mode='html')



API_KEY = 'BOT API'
weather_bot = WeatherBot(API_KEY)
weather_bot.init_commands()
weather_bot.bot.polling(none_stop=True)
